{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# 3 Types, Values, and Variables\n\nNotebook for chapter 3 of [JavaScript: The Definitive Guide: Master the World's Most-Used Programming Language, 7th Edition](https://www.oreilly.com/library/view/javascript-the-definitive/9781491952016/).\n\nJavaScript types can be divided into two categories: *primitive types* and *object types*. JavaScript's primitive types are composed by:\n* text\n* number\n* boolean\n* symbol\n* `null`\n* `undefined`\n\nAny type which is not one of the described above is defined as *type object* or an `object`. An `object` is a collection of `properties`, where each property as a name and a value (either a primitive value or another object).\n\nAn ordinary object is an *unordered collection of named values*. However, there are special types of object which differ from these standard objects, such as:\n* An `array` is an *ordered collection of numbered values*"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const fruits = ['Maçã', 'Banana'];\n\nconsole.log(fruits);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'Maçã', 'Banana' ]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "* A `Set` object represents a set of **unique** values"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const my_set1 = new Set()\n\nmy_set1.add(1)           // Set [ 1 ]\nmy_set1.add(5)           // Set [ 1, 5 ]\nmy_set1.add(5)           // Set [ 1, 5 ]\nmy_set1.add('some text') // Set [ 1, 5, 'some text' ]\n\nconsole.log(my_set1)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Set(3) { 1, 5, 'some text' }",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "* A `Map` object represents mapping keys to values (fairly similar, at least in usage, to Python's dictionaries)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// this is a map\nconst fruits2 = new Map([\n    [\"apples\", 500],\n    [\"bananas\", 300],\n    [\"oranges\", 200]\n  ]);\n\n  console.log(fruits2)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Map(3) { 'apples' => 500, 'bananas' => 300, 'oranges' => 200 }",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Among other...\n\n## Numbers\n\n`Number`, a primitive js numeric type, is used to represent integers and to approximate real numbers.\n\n### Integer Literals\n\nIn a JavaScript program, a base-10 integer is written as a sequence of digits. For example:"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "0\n3\n10000000"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m10000000\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "In addition to base-10 integer literals, JavaScript recognizes hexadecimal (base-16) values. A hexadecimal literal begins with `0x` or `0X`, followed by a string of hexadecimal digits. A hexadecimal digit is one of the digits 0 through 9 or the letters a (or A)\nthrough f (or F), which represent values 10 through 15. Here are examples of hexadecimal integer literals:"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let a = 0xff// => 255: (15*16 + 15)\nconsole.log(a)\nlet b = 0xBADCAFE // => 195939070\nconsole.log(b)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "255",
                                "195939070",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Floating-Point Literals\n\nFloating-point literals can have a decimal point; they use the traditional syntax for real numbers. A real value is represented as the integral part of the number, followed by a decimal point and the fractional part of the number."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "3.14\n2345.6789\n.333333333333333333\n6.02e23 // 6.02 × 10²³\n1.4738223E-32 // 1.4738223 × 10 ⁻ ³²"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m1.4738223e-32\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Arithmetic in JavaScript\n\nJavaScript programs work with numbers using the arithmetic operators . that the language provides. These include + for addition, - for subtraction, * for multiplication, / for division, and % for modulo (remainder after division). ES2016 adds ** for exponentiation. Full details on these and other operators can be found in Chapter 4."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "console.log(Math.pow(2,53));// => 9007199254740992: 2 to the power 53\nconsole.log(Math.round(.6)); // => 1.0: round to the nearest integer\nconsole.log(Math.ceil(.6)); // => 1.0: round up to an integer\nconsole.log(Math.floor(.6)); // => 0.0: round down to an integer\nconsole.log(Math.abs(-5)); // => 5: absolute value\nconsole.log(Math.max(1,2,3)); // Return the largest argument\nconsole.log(Math.min(1,2,3)); // Return the smallest argument\nconsole.log(Math.random()); // Pseudo-random number x where 0 <= x < 1.0\nconsole.log(Math.PI); // π: circumference of a circle / diameter\nconsole.log(Math.E); // e: The base of the natural logarithm\nconsole.log(Math.sqrt(3)); // => 3**0.5: the square root of 3\nconsole.log(Math.pow(3, 1/3)); // => 3**(1/3): the cube root of 3\nconsole.log(Math.sin(0)); // Trigonometry: also Math.cos, Math.atan, etc.\nconsole.log(Math.log(10)); // Natural logarithm of 10\nconsole.log(Math.log(100)/Math.LN10); // Base 10 logarithm of 100\nconsole.log(Math.cbrt(27)); // => 3: cube root\nconsole.log(Math.hypot(3, 4)); // => 5: square root of sum of squares of all arguments\nconsole.log(Math.log10(100)); // ()=> 2: Base-10 logarithm\nconsole.log(Math.log2(1024));// => 10: Base-2 logarithm\nconsole.log(Math.imul(2,3)); // => 6: optimized multiplication of 32-bit integers\nconsole.log(Math.clz32(0xf)); // => 28: number of leading zero bits in a 32-bit integer\nconsole.log(Math.trunc(3.9)); // => 3: convert to an integer by truncating fractional part"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "9007199254740992",
                                "3",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Arithmetic in JavaScript does not raise errors in cases of overflow, underflow, or division by zero. When the result of a numeric operation is larger than the largest representable number (overflow), the result is a special infinity value, Infinity."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "Infinity\nNumber.POSITIVE_INFINITY\n1/0\nNumber.MAX_VALUE * 2\n-Infinity\nNumber.NEGATIVE_INFINITY\n-1/0\n-Number.MAX_VALUE * 2\nNaN\nNumber.NaN\n0/0\nInfinity/Infinity\nNumber.MIN_VALUE/2\n-Number.MIN_VALUE/2\n-1/Infinity\n-0"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m0\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "The not-a-number value has one unusual feature in JavaScript: it does not compare equal to any other value, including itself. This means that you can’t write `x === NaN` to determine whether the value of a variable x is NaN. Instead, you must write `x != x`\nor `Number.isNaN(x)`. Those expressions will be true if, and only if, x has the same value as the global constant NaN."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "x = NaN\n\ntest_1 = x == NaN\n\ntest_2 = Number.isNaN(x)\n\n\nconsole.log(test_1)\nconsole.log(test_2)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "false",
                                "true",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Related to this, the function `Number.isFinite()` evaluates if an argument is a `Number` other than `NaN`, `Infinity`, or `-Infinity`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "a = 1011\nb = Infinity\nc = NaN\n\nconsole.log(Number.isFinite(a))\nconsole.log(Number.isFinite(b))\nconsole.log(Number.isFinite(c))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "true",
                                "false",
                                "false",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Arbitrary Precision Integers with BigInt\n\nAs the name implies, BigInt is a numeric type whose values are integers. The type was added to JavaScript mainly to allow the representation of 64-bit integers, which are required for compati‐\nbility with many other programming languages and APIs. But BigInt values can have thousands or even millions of digits, should you have need to work with numbers that large. You can use BigInt() as a function for converting regular JavaScript numbers or\nstrings to BigInt values:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "largest_number_allowed = Number.MAX_SAFE_INTEGER\n\neven_larger = Math.pow(largest_number_allowed, 2)\n\nconsole.log(even_larger)\n\nas_big_int = BigInt(even_larger)\n\nconsole.log(as_big_int)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "8.112963841460666e+31",
                                "81129638414606663681390495662080n",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Dates and Times\n\nJavaScript defines a simple Date class for representing and manipulating the numbers that represent dates and times. JavaScript Dates are objects, but they also have a numeric representation as a timestamp that specifies the number of elapsed milliseconds since January 1, 1970:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let timestamp = Date.now() // today's date as timestamp\nconsole.log(timestamp)\nlet now = Date() // today's date as a Date object\nconsole.log(now)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "1651926093028",
                                "Sat May 07 2022 13:21:33 GMT+0100 (Western European Summer Time)",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "The date methods will be covered in more detail later on. \n\n## Text\n\nThe JavaScript type for representing text is the *string*. A string is an immutable ordered sequence of 16-bit values, each of which typically representas a Unicode character. The *length* of a string is the number of 16-bit values it contains. JavaScript’s\nstrings (and its arrays) use zero-based indexing: the first 16-bit value is at position 0, the second at position 1, and so on. The empty string is the string of length 0. JavaScript does not have a special type that represents a single element of a string.\n\n### String Literals\n\nTo include a string in a JavaScript program, simply enclose the characters of the string within a matched pair of single or double quotes or backticks ( ' or \" or ` ). Double-quote characters and backticks may be contained within strings delimited by single-quote characters, and similarly for strings delimited by double quotes and backticks.\n\nThe original versions of JavaScript required string literals to be written on a single line, and it is common to see JavaScript code that creates long strings by concatenating single-line strings with the + operator. As of ES5, however, you can break a string literal across multiple lines by ending each line but the last with a backslash ( \\ )."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "a_text = \"Hello\"\nanother_text = \"World!\"\n\nconsole.log(a_text + another_text)\nconsole.log(a_text + \" \" +  another_text)\nconsole.log(a_text + \"\\n\" +  another_text)\nconsole.log(a_text  +  another_text)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "HelloWorld!",
                                "Hello World!",
                                "Hello",
                                "World!",
                                "HelloWorld!",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "The backslash character ( \\ ) has a special purpose in JavaScript strings. Combined with the character that follows it, it represents a character that is not otherwise representable within the string. For example, \\n is an escape sequence that represents a newline character."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log('You can\\'t do that!')"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "You can't do that!",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "To determine the length of a string we can use the `.length` property of the string. "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a_text = \"This is a sentence.\"\n\nconsole.log(\"Current sentence has \" + a_text.length + \" characters\")"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Current sentence has 19 characters",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "In addition, the JavaScript provides a rich api for working with strings."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(a_text.substring(1,4)); // the 2nd, 3rd, and 4th characters\nconsole.log(a_text.slice(1,4)); // idem, but different function\nconsole.log(a_text.split(\" \")); // split the string \n/* searching for a substring */\nconsole.log(a_text.indexOf(\"This\")); // position of first character of the substring\nconsole.log(a_text.startsWith(\"This\")); // => true: string starts with this substring\nconsole.log(a_text.endsWith(\"sentence.\")); // => true: string ends with this substring\nconsole.log(a_text.includes(\"a\")); // => true: string includes this substring\n/* creating modified versions of a string */\nconsole.log(a_text.replace(\"is \", \"is not \")); // replace the first sub-string with the second\nconsole.log(a_text.toLowerCase()); // to lower case\nconsole.log(a_text.toUpperCase()); // to upper case\nconsole.log(\"\\u006E\\u0303o\".normalize()); // => ño: normalize to unicocde\n/* String padding functions in ES2017 */\nconsole.log(\"x\".padStart(3)); // => \" x\": add\nconsole.log(\"x\".padEnd(3)); // => \"x \": add\nconsole.log(\"x\".padStart(3, \"*\")); // => \"**x\": add\nconsole.log(\"x\".padEnd(3, \"-\")); // => \"x--\": add\n/* white space trimming */ \nx = \"        Hello world!            \";\nconsole.log(x.trim());\nconsole.log(x.trimStart());\nconsole.log(x.trimEnd());"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "his",
                                "  x",
                                "x  ",
                                "**x",
                                "x--",
                                "Hello world!",
                                "Hello world!            ",
                                "        Hello world!",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "As discussed above, strings are nothing but arrays composed with 16-bit characters. Consequently, they may be index link arrays."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "a_text[0] + a_text[1] + a_text[2] + a_text[3];"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'This'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// with a for loop\nnew_text = \"\"\nmax_char = 4\nfor (let i = 0; i <= max_char; i++) {\n    new_text += a_text[i]\n}\nconsole.log(new_text)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "This ",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Template Literals\n\nIn ES6, string literals can be delimited with  backtics \"`\"."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(`This is a string with backticks`)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "This is a string with backticks",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "This matters because strings with these delimiters allow for interpolation, namely the final value of a string literal\nin backticks is computed by evaluating any included expressions, converting the values of those expressions to strings and combining those computed strings with the literal characters within the backticks."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let cur_name = \"Bill\";\nlet greeting_not_work = \"Hello ${ cur_name }. \"// Hello Bill\nlet greeting_works = `Hello ${ cur_name }. `// Hello Bill\nconsole.log(greeting_not_work)\nconsole.log(greeting_works)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Hello ${ cur_name }. ",
                                "Hello Bill. ",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Everything within the `{ ... }` will be evaluated as a javascript expression, interpreted, and converted into a string."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let cur_name = Math.PI\nlet greeting_works = `Hello ${ cur_name }. `\nconsole.log(greeting_works)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Hello 3.141592653589793. ",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "#### Tagged template literals\n\nTags are functions that perform custom parsing of a template literal. It is just like template literals, however we pass the \"tag\" to the beggining of the string and it will perform the operation on the entire string."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function romanize (num) {\n    // from: https://stackoverflow.com/questions/9083037/convert-a-number-into-a-roman-numeral-in-javascript\n    if (isNaN(num))\n        return NaN;\n    var digits = String(+num).split(\"\"),\n        key = [\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\",\n               \"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\",\n               \"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"],\n        roman = \"\",\n        i = 3;\n    while (i--)\n        roman = (key[+digits.pop() + (i * 10)] || \"\") + roman;\n    return Array(+digits.join(\"\") + 1).join(\"M\") + roman;\n}\n\nfunction romeNumerize(strings, num){\n    return strings[0] + romanize(num) + strings[1];\n}\n\nconsole.log(romeNumerize`I have ${ 2 } cats.`)\nconsole.log(romeNumerize`I have ${ 2 } cats. But my neighbour has ${ 4 }`)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "I have II cats.",
                                "I have II cats. But my neighbour has ",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "The second function did not work, that is because tagged literals are treated like arrays of strings where the the `${}` is the delimiter spliting the string. Since we only index the strings in position 0 and 1, we are only taking into consideration the first delimiter. To make it scalable to more."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function romeNumerizeEverything(strings, ...num) {\n    let newStr = '';\n\n    for (let i = 0; i < strings.length; i++) {\n\n        console.log(` [+] In position ${i} in the strings array we have string: ${strings[i]}`)\n        // because the first string can never be a delimiter\n        if (i > 0) {\n            // fetch the number and subtract the index of its position so we get the next\n            console.log(` [!] In position ${i - 1} in the num array we have value: ${num[i - 1]}`)\n            newStr += romanize(num[i - 1]);\n        }\n        // add the string\n        newStr += strings[i]\n    }\n    return newStr;\n}"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(romeNumerizeEverything`I have ${ 2 } cats.`)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                " [+] In position 0 in the strings array we have string: I have ",
                                " [+] In position 1 in the strings array we have string:  cats.",
                                " [!] In position 0 in the num array we have value: 2",
                                "I have II cats.",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "\nconsole.log(romeNumerizeEverything`I have ${ 2 } cats. But my neighbour has ${ 4 }`)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                " [+] In position 0 in the strings array we have string: I have ",
                                " [+] In position 1 in the strings array we have string:  cats. But my neighbour has ",
                                " [!] In position 0 in the num array we have value: 2",
                                " [+] In position 2 in the strings array we have string: ",
                                " [!] In position 1 in the num array we have value: 4",
                                "I have II cats. But my neighbour has IV",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "\nconsole.log(romeNumerizeEverything`I have ${ 2 } cats. But my neighbour has ${ 4 } cats. His neighbour, however, has something like ${ 12 } cats.`)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                " [+] In position 0 in the strings array we have string: I have ",
                                " [+] In position 1 in the strings array we have string:  cats. But my neighbour has ",
                                " [!] In position 0 in the num array we have value: 2",
                                " [+] In position 2 in the strings array we have string:  cats. His neighbour, however, has something like ",
                                " [!] In position 1 in the num array we have value: 4",
                                " [+] In position 3 in the strings array we have string:  cats.",
                                " [!] In position 2 in the num array we have value: 12",
                                "I have II cats. But my neighbour has IV cats. His neighbour, however, has something like XII cats.",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "\nconsole.log(romeNumerizeEverything`I have ${ 2 } cats. My partner has none. But my neighbour has ${ 4 } cats. His neighbour, however, has something like ${ 12 } cats.`)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                " [+] In position 0 in the strings array we have string: I have ",
                                "I have II cats. My partner has none. But my neighbour has IV cats. His neighbour, however, has something like XII cats.",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Boolean Values\n\nA boolean value represents truth or falsehood, on or off, yes or no. There are only two possible values of this type. The reserved words true and false evaluate to these two values. These will be covered in more detail later one...\n\nOverall, we can use operators to generate boolean values. e.g."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = null;\n\nconsole.log(a === null);\nconsole.log(a !== 2);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "true",
                                "true",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "As in other programming languages, like R, we have the `&` and `|` boolean operators representing the boolean **AND**/**OR**."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = \"reasonably large string\";\n\nif (a.length > 3 & a.length < 500) {\n    console.log(\"Yes, it is reasonably large\")\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Yes, it is reasonably large",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "The `&&` operator evaluates a true value *if and only if* both operands are true, false otherwise."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = null;\n\nif (a !== null && (a.length > 3 & a.length < 500)) {\n    console.log(\"Yes, it is reasonably large\")\n} else {\n    console.log(\"No size at all, it is a null!\")\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "No size at all, it is a null!",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "The operator `||` evaluates a boolean to true if either or the operands (or all) evaluate to true."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = \"A\";\n\nif (a !== null || (a.length > 3 & a.length < 500)) {\n    console.log(\"This is dangerous stuff.\")\n} else {\n    console.log(\"No size at all, it is a null!\")\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "This is dangerous stuff.",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## `null` and `undefined`\n\n`null` is a language keyword that evaluates to a special value that is usually used to indicate the absence of a value. Using the typeof operator on null returns the string “object”, indicating that null can be thought of as a special object value that indicates “no object”.\n\nThe `undefined` value occurs in more specific circumstances, namely:\n* values that have not been initialized\n* when you query an object property that does not exist\n* or in functions which do not return anything or in functions for which no arguments were passed."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a;\nconsole.log(a);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "undefined",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "function iShouldReturnStuff(a, b) {\n    let c = a + b\n}\n\nconsole.log(iShouldReturnStuff(1, 3))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "undefined",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "function iShouldReturnStuff(a, b) {\n    let c = a + b\n    return [a, b, c]\n}\n\nconsole.log(iShouldReturnStuff())\n// note that arithmetic operations with undefined objects seem to lead to NaN\nconsole.log(undefined + undefined)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ undefined, undefined, NaN ]",
                                "NaN",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Symbols\n\nSymbols were introduced in ES6 to serve as non-string property names. Recall that by default an `Object` is an unordered collection of properties, where each property has a name and a value. Property names are typically strings, but `Symbols` can also serve this purpose."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// start by creating an empty Object\nconst simpleObject = {};"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// generate the string and symbol property names\nlet strPropertyName = \"string name\";\nconsole.log(typeof(strPropertyName));\nlet symbolPropertyName = Symbol(\"symbol name\");\nconsole.log(typeof(symbolPropertyName));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "string",
                                "symbol",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// add properties to the initialized object\nsimpleObject[strPropertyName] = 1;\nsimpleObject[symbolPropertyName] = 2;\n\nconsole.log(simpleObject)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ 'string name': 1, [Symbol(symbol name)]: 2 }",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "To obtain the value of the symbol you have to invoke the symbol value."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "Symbol(simpleObject[symbolPropertyName])"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32mSymbol(2)\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "This usefullness of this object type seems to be tied with iterators which will be covered much, much further down the road."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Immutable Primitive Values and Mutable Object Rereferences\n\nThe fundamental difference between primitive values (undefined, null, booleans, numbers, and strings) and objects (e.g. arrays and functions) is that the former are immutable - i.e. there is no way of changing a primitive value. E.g."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let s = \"hello\";\ns.toUpperCase();\ns\n// Start with some lowercase text\n// Returns \"HELLO\", but doesn't alter s\n// => \"hello\": the original string has not changed"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'hello'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Primitives are also compared by value. Objects, however, are mutable and cannot be compared just by value. Two arrays are not equal even if they have the same values in the same order."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let o = { x: 1 }, p = { x: 1 };\nconsole.log(o === p);\nlet a = [\"fooh\"], b = [\"fooh\"];\nconsole.log(a === b);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "false",
                                "false",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Instead, objects are compared by references: *in js, two objects are equal if and only if they both refer to the same underlying object*."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = [];\nlet b = a;\nb[0] = 1;\nconsole.log(a[0])\nconsole.log(a === b)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "1",
                                "true",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "As you can see, assigning object `a`, an empty array, to `b` did not create a copy of it, but rather a reference. Now changes to `b` will also occur in `a` as it references it. If you want to create a new copy of an object, say of `a`, you must **explicitly copy its properties**, in this case, the elements of the array."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = [1,2,3,4];\nlet b = [];\nfor(let i = 0; i<a.length; i++) {\n    b[i] = a[i];\n}\nlet c = Array.from(b)\nconsole.log(c)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 1, 2, 3, 4 ]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Similarly, if we want to compare two distinct objects, we must compare their elements or properties."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function compareArray(a, b) {\n    if (a === b) {\n        console.log(\"arrays reference each other, so they are the same object\");\n        return true;\n    } else if (a.length !== b.length) {\n        console.log(\"the arrays have different lengths, cannot have the same elements\");\n        return false;\n    } else {\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) {\n                console.log(`Element ${a[i]} in position ${i} is different from ${b[i]} in the same position`)\n                return false;\n            }\n        }\n        console.log(\"the arrays have the same elements\");\n        return true;\n    }\n}"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let x = [];\nlet y = x;\ncompareArray(x,y)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "arrays reference each other, so they are the same object",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "let x = [];\nlet y = [];\ncompareArray(x,y)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "the arrays have the same elements",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "let x = [1, \"a\", \"b\", 2];\nlet y = [1, \"a\", \"b\"];\ncompareArray(x,y)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "the arrays have different lengths, cannot have the same elements",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mfalse\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "let x = [1, \"a\", 2, \"b\"];\nlet y = [1, \"a\", \"b\", 2];\ncompareArray(x, y)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Element 2 in position 2 is different from b in the same position",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mfalse\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Type conversions\n\nJS is very flexible about the types of values it requires as it frequently tries to automatically convert types. Examples below"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log((10 + \" strings\")) // it converts the number 10 automatically to a string\nconsole.log((\"string \" + 10)) \n\nconsole.log(\"10\" * \"10\") // it converts to numbers\n\n\nconsole.log((1 - \"x\")) // string \"x\" can't convert to a number\n\nconsole.log((NaN + \" strings\")) // cant convert a NaN to a string\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "10 strings",
                                "string 10",
                                "100",
                                "NaN",
                                "NaN strings",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "The table below sumarizes javascript automatic type conversions.\n\n![](figs/type-conv.png)\n\n\n### Conversions and equality\n\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}